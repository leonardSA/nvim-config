# priority allows us to overried COMMENT SNIPPETS defined in all.snippets
priority 1

###############################################################################
# MACRO SNIPPETS
###############################################################################
snippet inc "#include <...>"
#include <${1:stdio.h}>${0}
endsnippet

snippet Inc "#include ''...''"
#include "${1}"${0}
endsnippet

snippet def "#define ..."
#define ${1}${0}
endsnippet

snippet #if "#if ... #endif"
#if $1
${2}
#endif /* $1 */${0}
endsnippet

snippet ifdef "#ifdef ... #endif"
#ifdef $1
${2}
#endif /* $1 */${0}
endsnippet

snippet once "#ifndef #define ... #endif"
#ifndef $1
#define $1

${0}

#endif /* $1 */
endsnippet

snippet ndef "#ifndef ... #endif"
#ifndef $1
${2:#define}
#endif /* $1 */${0}
endsnippet

snippet nocxx
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
} /* extern "C" */
#endif
endsnippet
###############################################################################

###############################################################################
# STATEMENTS SNIPPETS
###############################################################################
snippet tn "(...) ? ... : ...;"
(${1}) ? ${2} : ${3};${0}
endsnippet

snippet if "if { ... }"
if (${1})
{
	${2}
}${0}
endsnippet

snippet ife "if { ... } else { ... }"
if (${1}) 
{
	${2}
}
else 
{
	${3}
}${0}
endsnippet

snippet el "else { ... }"
else 
{
	${1}
}${0}
endsnippet

snippet elif "else if { ... }"
else if ($1) 
{
	${2}
} ${0}
endsnippet

snippet sw "switch(...) { case (...): ... default: ... }"
switch (${1})
{
	case (${2}):
	break;
	default:
}${0}
endsnippet
###############################################################################

###############################################################################
# STATEMENTS SNIPPETS
###############################################################################
snippet wh "while(...) { ... }"
while (${1})
{
	${2}
}${0}
endsnippet

snippet fr "for(... ; ... ; ...) { ... }"
for (${1} ; ${2} ; ${3})
{
	${4}
}${0}
endsnippet
###############################################################################

###############################################################################
# FUNCTION SNIPPETS
###############################################################################
snippet fn "ret function(args) {...}"
${1:void} ${2:function}(${3:void}) 
{
	${4}
}${0}
endsnippet

snippet main "void main(argc, char* argv[])"
${1:int} main(${2:int argc, char* argv[]})
{
	return ${3};
}${0}
endsnippet
###############################################################################


###############################################################################
# TYPE SNIPPETS
###############################################################################
snippet st
typedef struct $1 {
	${3}
} $1${2:_t};${0}
endsnippet

snippet td
typedef ${1:type} ${2:new_type}
endsnippet

snippet en
typedef enum $1
{
	${3}
} $1${2:_t};${0}
endsnippet
###############################################################################

###############################################################################
# COMMENT SNIPPETS
###############################################################################
snippet todo "TODO: ..."
/* TODO: ${1} */${0} 
endsnippet

snippet fix "FIXME: ..."
/* FIXME: ${1} */${0}
endsnippet
###############################################################################
